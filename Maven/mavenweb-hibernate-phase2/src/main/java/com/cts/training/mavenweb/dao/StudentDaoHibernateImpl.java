package com.cts.training.mavenweb.dao;

import java.util.List;

import javax.transaction.Transactional;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.query.Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.cts.training.mavenweb.entity.Users;

@Repository
@Transactional
public class StudentDaoHibernateImpl implements IStudentDao {

	// dependency
	private SessionFactory sessionFactory;
	
	@Autowired
	public StudentDaoHibernateImpl(SessionFactory sessionFactory) {
		// TODO Auto-generated constructor stub
		this.sessionFactory = sessionFactory;
	}
	
	@Override
	public List<Users> findAll() {
		// TODO Auto-generated method stub
		// get the Hibernate Session object (Persistant Context)
		Session session = this.sessionFactory.getCurrentSession();
		
		
		// Student : entity class name
		// query generated by Hibernate is returned as Object
		Query<Users> query =  session.createQuery("from Student", Users.class);
		List<Users> users = query.getResultList();
		return users;
	}

	@Override
	public Users findById(Integer id) {
		// TODO Auto-generated method stub
		// get the Hibernate Session object (Persistant Context)
		// every time new session object is required
		// as persistant context works within a method
		Session session = this.sessionFactory.getCurrentSession();
		Users users = session.find(Users.class, id);
		
		return users;
	}

	@Override
	public boolean add(Users users) {
		// TODO Auto-generated method stub
		Session session = this.sessionFactory.getCurrentSession();
		
		session.save(users);
		
		return true;
	}

	@Override
	public boolean update(Users users) {
		// TODO Auto-generated method stub
		Session session = this.sessionFactory.getCurrentSession();
		
		session.update(users);
		return true;
	}

	@Override
	public boolean delete(Integer id) {
		// TODO Auto-generated method stub
		Session session = this.sessionFactory.getCurrentSession();
		
		session.remove(this.findById(id));
		return true;
	}

}
